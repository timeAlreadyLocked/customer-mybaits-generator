<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <properties resource="generatorConfig.properties"></properties>
    <!-- 数据库驱动-->
    <classPathEntry
            location="${driver}"/>
    <context id="default" targetRuntime="MyBatis3">

        <!-- 查询单条数据插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.SelectOneByExamplePlugin"/>
        <!-- 数据Model链式构建插件 -->
        <plugin type="com.itfsw.mybatis.generator.plugins.ModelBuilderPlugin"/>
        <!--<plugin type="com.GeneratorSwagger2Doc"/>-->
        <plugin type="cn.lpj.mybatis.generator.CustomerMybatisPlugin"/>
        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="false"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!--数据库链接URL，用户名、密码 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="${connectionURL}"
                        userId="${userId}"
                        password="${password}">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成模型的包名和位置-->
        <javaModelGenerator targetPackage="${entityTargetPackage}"
                            targetProject="${entityTargetProject}">
            <!-- optional.是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"/>
            <!-- optional.建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成映射文件的包名和位置-->
        <sqlMapGenerator targetPackage="${xmlTargetPackage}"
                         targetProject="${xmlTargetProject}">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 生成DAO的包名和位置
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${interfaceTargetPackage}"
                             targetProject="${interfaceTargetProject}">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名-->
        <table tableName="tb_content">

            <!-- optional.插入时,是否生成selectKey元素 -->
            <!--<generatedKey column="id" sqlStatement="SELECT LAST_INSERT_ID()" identity="true" type="post"/>-->

            <!-- optional.忽略某一列 -->
            <!--<ignoreColumn column="gmt_create" delimitedColumnName="true"/>-->

            <!--optional.覆盖Model的生成规则,主要是设置javaType -->
            <!--<columnOverride column="id" javaType="java.lang.Long" jdbcType="INTEGER" typeHandler=""-->
            <!--delimitedColumnName=""/>-->

        </table>
        <table tableName="tb_content_category"></table>
        <table tableName="tb_item"></table>
        <table tableName="tb_item_cat"></table>
        <table tableName="tb_item_desc"></table>
        <table tableName="tb_item_param"></table>
    </context>

</generatorConfiguration>